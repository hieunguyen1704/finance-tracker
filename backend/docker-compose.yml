version: '3.8'
name: finance-tracker
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app # Mount project directory for live code changes
      - app_node_modules:/app/node_modules # Prevent overwriting node_modules in the container
    ports:
      - '3000:3000' # Map the app's port to the host
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      MAILTRAP_USER: ${MAILTRAP_USER}
      MAILTRAP_PASSWORD: ${MAILTRAP_PASSWORD}
      MAILTRAP_HOST: ${MAILTRAP_HOST}
      MAILTRAP_PORT: ${MAILTRAP_PORT}
      EMAIL_FROM: ${EMAIL_FROM}
      APP_URL: ${APP_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}

    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: npm run dev

  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432' # Expose the database port
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      retries: 5
      timeout: 10s

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    volumes:
      - .:/worker # Mount project directory for live code changes
      - worker_node_modules:/worker/node_modules # Prevent overwriting node_modules in the container
    environment:
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: npm run worker:dev

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - '5672:5672' # For application connections
      - '15672:15672' # For RabbitMQ management dashboard
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  postgres_data: # Named volume for database persistence
  worker_node_modules:
  app_node_modules:
